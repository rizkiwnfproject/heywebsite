// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum RoleUser {
  ADMIN
  MEMBER
}

enum StatusInvite {
  PENDING
  ACCEPTED
  REJECTED
}

enum TypeCourseItem {
  EXTERNAL
  YOUTUBE
}

model User {
  id                 String    @id @default(cuid())
  name               String
  username           String    @unique
  email              String    @unique
  number_phone       String
  photo              String?
  lastUsernameChange DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Session        Session[]
  SpaceMember    SpaceMember[]
  Notification   Notification[]
  Message        Message[]
  Reaction       Reaction[]
  Note           Note[]
  Course         Course[]
  Space          Space[]
  CourseProgress CourseProgress[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Space {
  id          String   @id @default(cuid())
  name        String
  description String?
  permission  Boolean  @default(true)
  avatar      String?
  createdBy   String
  creator     User     @relation(fields: [createdBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  SpaceMember  SpaceMember[]
  Invite       Invite[]
  Notification Notification[]
  Message      Message[]
  Note         Note[]
  Course       Course[]
}

model Invite {
  id        String    @id @default(cuid())
  spaceId   String
  Space     Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  token     String
  expiresAt DateTime?
  createdBy String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
}

model SpaceMember {
  id       String       @id @default(cuid())
  spaceId  String
  Space    Space        @relation(fields: [spaceId], references: [id])
  userId   String
  User     User         @relation(fields: [userId], references: [id])
  role     RoleUser     @default(MEMBER)
  status   StatusInvite @default(PENDING)
  joinedAt DateTime     @default(now())

  @@unique([spaceId, userId])
}

model Notification {
  id        String   @id @default(cuid())
  spaceId   String
  Space     Space    @relation(fields: [spaceId], references: [id])
  userId    String
  User      User     @relation(fields: [userId], references: [id])
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Message {
  id        String   @id @default(cuid())
  spaceId   String
  Space     Space    @relation(fields: [spaceId], references: [id])
  userId    String
  User      User     @relation(fields: [userId], references: [id])
  message   String?
  photo     String?
  reply_to  String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Reaction Reaction[]
}

model Reaction {
  id        String   @id @default(cuid())
  userId    String
  User      User     @relation(fields: [userId], references: [id])
  messageId String
  Message   Message  @relation(fields: [messageId], references: [id])
  reaction  String?
  createdAt DateTime @default(now())

  @@unique([userId, messageId, reaction])
}

model Note {
  id        String   @id @default(cuid())
  spaceId   String
  Space     Space    @relation(fields: [spaceId], references: [id])
  userId    String
  User      User     @relation(fields: [userId], references: [id])
  title     String
  content   Json
  photo     String?
  link      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id          String        @id @default(cuid())
  spaceId     String
  Space       Space         @relation(fields: [spaceId], references: [id])
  userId      String
  User        User          @relation(fields: [userId], references: [id])
  title       String
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  CourseTopic CourseTopic[]
}

model CourseTopic {
  id         String       @id @default(cuid())
  courseId   String
  Course     Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title      String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  CourseItem CourseItem[]
}

model CourseItem {
  id             String           @id @default(cuid())
  courseTopicId  String
  CourseTopic    CourseTopic      @relation(fields: [courseTopicId], references: [id], onDelete: Cascade)
  type           TypeCourseItem
  title          String?
  url            String?
  content        String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  CourseProgress CourseProgress[]
}

model CourseProgress {
  id           String     @id @default(cuid())
  userId       String
  User         User       @relation(fields: [userId], references: [id])
  courseItemId String
  CourseItem   CourseItem @relation(fields: [courseItemId], references: [id])
  isDone       Boolean    @default(false)
  updatedAt    DateTime   @default(now())

  @@unique([userId, courseItemId])
}
